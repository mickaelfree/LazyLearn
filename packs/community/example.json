{
  "name": "Example Pack",
  "version": "1.0.0",
  "author": "LazyLearn Contributors",
  "description": "Exemple de pack communautaire avec des techniques d'apprentissage personnalis√©es",
  "prompts": [
    {
      "id": "eli5",
      "name": "ELI5 (Explain Like I'm 5)",
      "icon": "üë∂",
      "category": "custom",
      "description": "Explication ultra-simple",
      "prompt": "Explique ce concept comme si j'avais 5 ans. Utilise des mots tr√®s simples, des analogies avec des jouets, des animaux, ou des situations famili√®res √† un enfant. √âvite tout jargon technique.\n\nLe concept √† expliquer est : "
    },
    {
      "id": "rubber_duck",
      "name": "Rubber Duck Debugging",
      "icon": "ü¶Ü",
      "category": "custom",
      "description": "M√©thode du canard en plastique",
      "prompt": "Aide-moi √† d√©boguer ce code en jouant le r√¥le d'un canard en plastique. Pose-moi des questions simples pour me faire r√©fl√©chir ligne par ligne :\n\n1. Que fait chaque ligne exactement ?\n2. Quelles sont mes hypoth√®ses ?\n3. O√π pourraient √™tre les bugs ?\n4. Que se passe-t-il si je teste avec des cas extr√™mes ?\n\nLe code √† d√©boguer est : "
    },
    {
      "id": "time_complexity",
      "name": "Analyse de Complexit√©",
      "icon": "‚è±Ô∏è",
      "category": "custom",
      "description": "Analyse Big O d√©taill√©e",
      "prompt": "Analyse la complexit√© algorithmique de ce code :\n\n1. **Complexit√© temporelle (Big O)** :\n   - Meilleur cas\n   - Cas moyen\n   - Pire cas\n\n2. **Complexit√© spatiale (Big O)** :\n   - M√©moire utilis√©e\n   - Stack vs Heap\n\n3. **Optimisations possibles** :\n   - Comment r√©duire la complexit√© ?\n   - Quels trade-offs consid√©rer ?\n\n4. **Comparaison** :\n   - Comment se compare-t-il aux alternatives ?\n\nLe code √† analyser est : "
    },
    {
      "id": "real_world_use",
      "name": "Cas d'Usage R√©el",
      "icon": "üåé",
      "category": "custom",
      "description": "Applications dans le monde r√©el",
      "prompt": "Explique comment ce concept est utilis√© dans le monde r√©el :\n\n1. **Entreprises/Projets c√©l√®bres** qui l'utilisent\n2. **Cas d'usage concrets** avec exemples\n3. **Probl√®mes r√©solus** par ce concept\n4. **Alternatives** utilis√©es dans l'industrie\n5. **Tendances futures** li√©es √† ce concept\n\nLe concept √† contextualiser est : "
    },
    {
      "id": "interview_prep",
      "name": "Pr√©paration Interview",
      "icon": "üíº",
      "category": "custom",
      "description": "Questions d'entretien technique",
      "prompt": "Pr√©pare-moi pour un entretien technique sur ce concept :\n\n1. **Questions fr√©quentes** :\n   - 5 questions courantes en interview\n   - R√©ponses attendues\n\n2. **Pi√®ges √† √©viter** :\n   - Erreurs courantes des candidats\n   - Comment les √©viter\n\n3. **Questions avanc√©es** :\n   - Questions pour candidats exp√©riment√©s\n   - Comment impressionner l'intervieweur\n\n4. **Exercices pratiques** :\n   - 2-3 exercices de code √† ma√Ætriser\n\nLe concept pour l'interview est : "
    },
    {
      "id": "cheat_sheet",
      "name": "Cheat Sheet",
      "icon": "üìã",
      "category": "custom",
      "description": "Antis√®che condens√©e",
      "prompt": "Cr√©e une cheat sheet concise et compl√®te pour ce concept :\n\n1. **Syntaxe essentielle** (avec exemples)\n2. **Cas d'usage principaux** (top 5)\n3. **Pi√®ges courants** (top 3)\n4. **M√©thodes/fonctions importantes**\n5. **Exemples de code rapides**\n6. **Ressources pour aller plus loin**\n\nFormat : Ultra-condens√©, facile √† scanner visuellement\n\nLe concept pour la cheat sheet est : "
    },
    {
      "id": "learning_resources",
      "name": "Ressources d'Apprentissage",
      "icon": "üìö",
      "category": "custom",
      "description": "Ressources pour approfondir",
      "prompt": "Recommande des ressources pour approfondir ce concept :\n\n1. **Tutoriels** (d√©butant, interm√©diaire, avanc√©)\n2. **Documentation officielle** (sections pertinentes)\n3. **Livres** (classiques et modernes)\n4. **Vid√©os/Cours** (YouTube, Udemy, etc.)\n5. **Projets pratiques** pour s'exercer\n6. **Communaut√©s** (Discord, Reddit, forums)\n\nClasse par niveau de difficult√©.\n\nLe concept √† approfondir est : "
    },
    {
      "id": "common_bugs",
      "name": "Bugs Courants",
      "icon": "üêõ",
      "category": "custom",
      "description": "Erreurs typiques et solutions",
      "prompt": "Liste les bugs et erreurs les plus courants avec ce concept :\n\n1. **Top 5 des bugs** :\n   - Description du bug\n   - Pourquoi il arrive\n   - Comment le d√©tecter\n   - Comment le corriger\n\n2. **Messages d'erreur courants** :\n   - Interpr√©tation\n   - Solutions\n\n3. **Pr√©vention** :\n   - Bonnes pratiques pour √©viter ces bugs\n   - Outils de d√©tection\n\nLe concept √† analyser est : "
    },
    {
      "id": "refactoring_tips",
      "name": "Refactoring",
      "icon": "‚ôªÔ∏è",
      "category": "custom",
      "description": "Am√©liorer le code existant",
      "prompt": "Sugg√®re des refactorings pour am√©liorer ce code :\n\n1. **Code smell d√©tect√©** :\n   - Quels anti-patterns ?\n   - Pourquoi sont-ils probl√©matiques ?\n\n2. **Refactorings propos√©s** :\n   - √âtape par √©tape\n   - Version avant/apr√®s\n   - B√©n√©fices de chaque refactoring\n\n3. **Design patterns applicables** :\n   - Quels patterns am√©liorerait le code ?\n   - Comment les impl√©menter ?\n\nLe code √† refactorer est : "
    },
    {
      "id": "testing_strategy",
      "name": "Strat√©gie de Tests",
      "icon": "üß™",
      "category": "custom",
      "description": "Comment tester ce code",
      "prompt": "Cr√©e une strat√©gie de tests compl√®te pour ce code :\n\n1. **Tests unitaires** :\n   - Cas nominaux\n   - Cas limites\n   - Cas d'erreur\n\n2. **Tests d'int√©gration** :\n   - Sc√©narios √† tester\n   - Mocks n√©cessaires\n\n3. **Couverture** :\n   - Objectif de couverture\n   - Zones critiques\n\n4. **Exemples de tests** :\n   - Code de test concret\n   - Framework recommand√©\n\nLe code √† tester est : "
    }
  ]
}
