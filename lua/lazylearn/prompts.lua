-- LazyLearn.nvim - Prompts Module
-- Author: LazyLearn Contributors
-- License: MIT

local M = {}
local config = require("lazylearn.config")

-- Prompts int√©gr√©s (provenant de votre fichier original)
M.builtin = {
  -- TECHNIQUES MN√âMONIQUES AVANC√âES
  {
    id = "chunking",
    name = "Chunking Mn√©monique",
    icon = "üß©",
    category = "mnemonic",
    description = "D√©coupage m√©moriel optimis√©",
    prompt = [[D√©compose ce concept en chunks mn√©moniques :
1. Identifie 5-7 unit√©s d'information distinctes (chunks)
2. Organise ces chunks de mani√®re hi√©rarchique
3. Cr√©e des connections entre chunks utilisant des motifs ou associations
4. Sugg√®re des phrases mn√©moniques courtes pour chaque chunk
5. Propose une strat√©gie de r√©vision espac√©e pour ces chunks

Le concept √† chunker est : ]],
  },
  {
    id = "memory_palace",
    name = "Palais de M√©moire",
    icon = "üèõÔ∏è",
    category = "mnemonic",
    description = "Technique de m√©morisation spatiale",
    prompt = [[Cr√©e un palais de m√©moire pour ce concept de d√©veloppement :
1. D√©finis 5-7 "pi√®ces" distinctes repr√©sentant les aspects cl√©s du concept
2. Pour chaque pi√®ce, associe:
   - Une image vive et sensorielle
   - Un objet ou meuble distinct pour chaque sous-concept
   - Une action ou interaction m√©morable
3. Cr√©e un parcours logique reliant ces pi√®ces
4. Ajoute des √©l√©ments insolites pour renforcer la m√©morisation
5. Explique comment "parcourir" ce palais pour rappeler le concept

Le concept √† m√©moriser est : ]],
  },
  {
    id = "dual_coding",
    name = "Double Encodage",
    icon = "üîÑ",
    category = "mnemonic",
    description = "Encodage visuel et verbal",
    prompt = [[Encode ce concept visuellement et verbalement :
1. Repr√©sentation textuelle concise (5-7 phrases cl√©s)
2. Repr√©sentation visuelle (d√©crite en d√©tail)
3. Connections explicites entre √©l√©ments visuels et textuels
4. Narration combinant les aspects visuels et verbaux
5. Suggestions pour renforcer l'encodage multisensoriel

Le concept √† encoder est : ]],
  },
  {
    id = "elaborative_interrogation",
    name = "Interrogation √âlaborative",
    icon = "‚ùì",
    category = "mnemonic",
    description = "Comprendre par les pourquoi",
    prompt = [[Pose les questions "pourquoi" essentielles :
1. Pourquoi ce concept fonctionne comme il le fait?
2. Pourquoi a-t-il √©t√© con√ßu de cette mani√®re?
3. Pourquoi est-il structur√© ainsi?
4. Pourquoi cette approche plut√¥t qu'une alternative?
5. Pourquoi est-il important de bien comprendre ce concept?
6. Pourquoi ce concept s'int√®gre-t-il avec d'autres de cette fa√ßon?
7. Fournir des r√©ponses d√©taill√©es √† chaque question

Le concept √† interroger est : ]],
  },
  {
    id = "desirable_difficulty",
    name = "Difficult√© D√©sirable",
    icon = "üîç",
    category = "mnemonic",
    description = "Apprentissage par effort productif",
    prompt = [[Applique la technique de difficult√© d√©sirable √† ce concept :
1. Version complexifi√©e d√©lib√©r√©ment :
   - R√©√©cris le concept avec 30% plus de complexit√©
   - Introduis des abstractions suppl√©mentaires
   - Ajoute des contraintes artificielles

2. R√©cup√©ration forc√©e :
   - Cr√©e 3-5 questions d√©lib√©r√©ment difficiles
   - Formule des probl√®mes qui semblent insolubles au premier abord
   - Propose des situations d'application avec informations manquantes

3. R√©solution guid√©e :
   - Fournis des indices minimaux pour surmonter les obstacles
   - D√©compose le chemin de r√©solution en √©tapes non-√©videntes
   - Explique pourquoi cette difficult√© renforce l'apprentissage

Le concept √† apprendre par difficult√© d√©sirable est : ]],
  },
  {
    id = "inverted_feynman",
    name = "Feynman Invers√©",
    icon = "üß†",
    category = "mnemonic",
    description = "Du simple au complexe et retour",
    prompt = [[Applique la technique Feynman invers√©e √† ce concept :
1. Simplification extr√™me :
   - Explique d'abord ce concept comme √† un enfant de 10 ans
   - Utilise uniquement des mots simples et des analogies concr√®tes
   - √âvite tout jargon technique

2. Complexification progressive :
   - R√©introduis progressivement la complexit√© en 4 niveaux
   - √Ä chaque niveau, identifie les lacunes de l'explication pr√©c√©dente
   - Marque explicitement les points o√π la simplicit√© devient trompeuse

3. Connexion finale :
   - R√©concilie la version simple et la version complexe
   - Cr√©e un mod√®le mental hybride qui pr√©serve l'intuition sans sacrifier la pr√©cision
   - Identifie les "ancres mentales" cl√©s pour basculer entre niveaux de compr√©hension

Le concept √† expliquer par m√©thode Feynman invers√©e est : ]],
  },
  {
    id = "interleaving",
    name = "Interleaving Conceptuel",
    icon = "üßµ",
    category = "mnemonic",
    description = "Connexions inter-domaines",
    prompt = [[Applique la technique d'interleaving conceptuel √† ce concept :
1. Identification des concepts connexes :
   - Identifie 3-4 concepts qui semblent non-reli√©s mais partagent des structures profondes
   - Trouve des domaines d'application radicalement diff√©rents
   - S√©lectionne des concepts √† diff√©rents niveaux d'abstraction

2. Tissage cognitif :
   - Alterne entre ces concepts par blocs de 3-5 phrases
   - Cr√©e des transitions d√©lib√©r√©ment abruptes entre domaines
   - Force des connexions non-√©videntes entre les concepts

3. Synth√®se transversale :
   - Extrais les patterns communs qui √©mergent de ce tissage
   - Formule des principes m√©tacognitifs applicables √† tous les domaines
   - Cr√©e une "carte de transfert" pour appliquer ce concept dans des contextes inattendus

Le concept principal pour l'interleaving est : ]],
  },
  {
    id = "timed_retrieval",
    name = "R√©cup√©ration Temporis√©e",
    icon = "‚è±Ô∏è",
    category = "mnemonic",
    description = "Protocole de r√©vision programm√©e",
    prompt = [[Cr√©e un protocole de r√©cup√©ration temporis√©e pour ce concept :
1. Points de rappel imm√©diats (apr√®s 1 minute) :
   - 3 questions courtes exigeant un rappel pr√©cis de d√©tails cl√©s
   - Force la r√©cup√©ration sans indices

2. Points de rappel √† court terme (apr√®s 10 minutes) :
   - 2 probl√®mes d'application demandant une manipulation du concept
   - Fournir 30% des informations n√©cessaires

3. Points de rappel √† moyen terme (apr√®s 1 jour) :
   - 1 probl√®me de synth√®se exigeant une reconstruction compl√®te du concept
   - Ajouter une contrainte non pr√©sente dans l'apprentissage initial

4. Points de rappel √† long terme (apr√®s 1 semaine) :
   - 1 probl√®me d'int√©gration demandant de combiner ce concept avec un nouveau
   - Demander une application dans un domaine non couvert initialement

Le concept pour la r√©cup√©ration temporis√©e est : ]],
  },
  {
    id = "multisensory_coding",
    name = "Multi-Sensoriel",
    icon = "üé®",
    category = "mnemonic",
    description = "Encodage par tous les sens",
    prompt = [[Encode ce concept dans multiples modalit√©s sensorielles :
1. Encodage visuo-spatial :
   - Cr√©e une repr√©sentation visuelle abstraite (d√©crite en d√©tail)
   - Associe des couleurs sp√©cifiques aux composantes cl√©s
   - D√©finis des relations spatiales explicites entre √©l√©ments

2. Encodage auditif-rythmique :
   - D√©veloppe une phrase mn√©monique avec un rythme sp√©cifique
   - Cr√©e des associations sonores pour les √©l√©ments cl√©s
   - Propose un pattern de "lecture √† voix haute" avec emphases

3. Encodage kinesth√©sique :
   - Con√ßois des gestes physiques repr√©sentant le concept
   - Cr√©e une "chor√©graphie cognitive" s√©quentielle
   - D√©cris les sensations physiques associ√©es

4. Encodage √©motionnel :
   - Associe des √©tats √©motionnels sp√©cifiques √† des aspects du concept
   - Cr√©e une "histoire √©motionnelle" suivant une progression
   - √âtablis des ancres √©motionnelles pour les points critiques

Le concept √† encoder multi-sensoriellement est : ]],
  },

  -- ANALYSE DE PRINCIPES
  {
    id = "pareto",
    name = "20/80 Analyse",
    icon = "‚öñÔ∏è",
    category = "principles",
    description = "Points critiques et impact maximal",
    prompt = [[Analyse selon le principe de Pareto (20/80) pour ce concept :
1. Points critiques (20%) :
   - Quels sont les √©l√©ments essentiels ?
   - Quelles parties demandent le plus d'attention ?
   - O√π faut-il concentrer ses efforts ?

2. Impact maximal (80%) :
   - Quelles optimisations auront le plus d'impact ?
   - Quelles parties du code sont les plus utilis√©es ?
   - O√π sont les gains rapides possibles ?

3. Priorit√©s d'apprentissage :
   - Quels concepts ma√Ætriser en premier ?
   - Quelles comp√©tences d√©velopper prioritairement ?
   - Quels patterns sont les plus importants ?

Le concept √† analyser est : ]],
  },
  {
    id = "core_principles",
    name = "Principes Fondamentaux",
    icon = "üéØ",
    category = "principles",
    description = "Bases essentielles",
    prompt = [[Extrais les principes fondamentaux de ce concept :
1. Quels sont les axiomes de base ?
2. Quelles sont les r√®gles invariables ?
3. Quels patterns se r√©p√®tent ?
4. Quelles sont les exceptions importantes ?
Le concept √† analyser est : ]],
  },
  {
    id = "concept_map",
    name = "Carte Conceptuelle",
    icon = "üó∫Ô∏è",
    category = "principles",
    description = "Visualiser les relations",
    prompt = [[D√©compose ce concept en cr√©ant une carte mentale :
1. Concept central
2. Principes fondamentaux
3. Relations cl√©s
4. Applications pratiques
5. Concepts connexes
Le concept √† analyser est : ]],
  },

  -- MOD√àLES MENTAUX
  {
    id = "meta_programming_model",
    name = "M√©ta-Mod√®les",
    icon = "üî¨",
    category = "mental_models",
    description = "Mod√®les mentaux fondamentaux",
    prompt = [[Analyse ce concept avec ces mod√®les mentaux fondamentaux :
1. Mod√®le de flux de donn√©es:
   - Comment les donn√©es circulent-elles?
   - Quelles transformations subissent-elles?
   - O√π sont les points de d√©cision?

2. Mod√®le d'abstraction en couches:
   - Quelles sont les couches d'abstraction?
   - Comment interagissent-elles?
   - Quelles responsabilit√©s √† chaque niveau?

3. Mod√®le d'√©tats et transitions:
   - Quels sont les √©tats possibles?
   - Comment se produisent les transitions?
   - Quelles sont les invariants?

4. Mod√®le de composition/d√©composition:
   - Comment ce concept peut-il √™tre d√©compos√©?
   - Comment peut-il √™tre recombin√©?
   - Quelles sont les unit√©s minimales fonctionnelles?

Le concept √† analyser est : ]],
  },
  {
    id = "debugging_models",
    name = "Mod√®les de D√©bogage",
    icon = "üêû",
    category = "mental_models",
    description = "Mod√®les pour r√©solution de probl√®mes",
    prompt = [[Applique ces mod√®les mentaux de d√©bogage :
1. Mod√®le de cause √† effet:
   - Quelles sont les relations causales?
   - Comment isoler les facteurs individuels?
   - Comment confirmer les hypoth√®ses?

2. Mod√®le de regression:
   - Quand ce probl√®me est-il apparu?
   - Quelles modifications ont pu l'introduire?
   - Comment revenir √† un √©tat fonctionnel?

3. Mod√®le de divide-and-conquer:
   - Comment bisectionner le probl√®me?
   - Quelles parties peuvent √™tre exclues?
   - Comment r√©duire l'espace de recherche?

4. Mod√®le d'anomalie syst√©mique:
   - S'agit-il d'un probl√®me isol√© ou syst√©mique?
   - Existe-t-il d'autres occurrences similaires?
   - Y a-t-il un pattern sous-jacent?

Le probl√®me √† d√©boguer est : ]],
  },
  {
    id = "architecture_models",
    name = "Mod√®les d'Architecture",
    icon = "üèóÔ∏è",
    category = "mental_models",
    description = "Pens√©e architecturale",
    prompt = [[Analyse cette architecture avec ces mod√®les mentaux :
1. Mod√®le de contraintes:
   - Quelles contraintes d√©finissent le syst√®me?
   - Comment ces contraintes fa√ßonnent-elles les solutions?
   - Comment optimiser dans ces limites?

2. Mod√®le de couplage et coh√©sion:
   - O√π sont les points de couplage?
   - Comment mesurer et am√©liorer la coh√©sion?
   - Quels changements am√©lioreraient la structure?

3. Mod√®le de surface d'attaque:
   - Quelles sont les vuln√©rabilit√©s potentielles?
   - Comment r√©duire la surface d'attaque?
   - Quels m√©canismes de d√©fense en profondeur?

4. Mod√®le d'√©volution:
   - Comment ce syst√®me √©voluera-t-il?
   - Quelles parties changeront le plus?
   - Comment faciliter les changements futurs?

L'architecture √† analyser est : ]],
  },

  -- APPRENTISSAGE PROGRESSIF
  {
    id = "analogies",
    name = "Analogies Quotidiennes",
    icon = "üè†",
    category = "progressive",
    description = "Comprendre par comparaison",
    prompt = [[Explique ce concept √† travers des analogies de la vie quotidienne.
Ne donne pas d'exemple technique, mais utilise des comparaisons avec :
1. Des situations quotidiennes
2. Des objets familiers
3. Des exp√©riences communes
Le concept √† expliquer est : ]],
  },
  {
    id = "socratic",
    name = "Questions Socratiques",
    icon = "ü§î",
    category = "progressive",
    description = "Comprendre par le questionnement",
    prompt = [[En tant que mentor Socratique, pose une s√©rie de questions progressives pour comprendre ce concept :
1. D'abord, des questions de clarification basiques
2. Ensuite, des questions sur les hypoth√®ses sous-jacentes
3. Puis, des questions sur les implications
4. Enfin, des questions de synth√®se
Le concept est : ]],
  },
  {
    id = "learning_path",
    name = "Chemin d'Apprentissage",
    icon = "üìà",
    category = "progressive",
    description = "Progression structur√©e",
    prompt = [[Cr√©e un chemin d'apprentissage progressif pour ce concept :
1. Quels sont les pr√©requis essentiels ?
2. Quelles sont les √©tapes d'apprentissage ?
3. Quels sont les points de contr√¥le de compr√©hension ?
4. Comment v√©rifier la ma√Ætrise ?
Le concept √† apprendre est : ]],
  },
  {
    id = "misconceptions",
    name = "Correction Misconceptions",
    icon = "üêõ",
    category = "progressive",
    description = "√âviter les erreurs courantes",
    prompt = [[Identifie et corrige les confusions courantes :
1. Quelles sont les erreurs de compr√©hension typiques ?
2. Pourquoi ces erreurs sont-elles fr√©quentes ?
3. Comment √©viter ces pi√®ges ?
4. Quels sont les points cl√©s √† retenir ?
Le concept √† clarifier est : ]],
  },

  -- APPLICATIONS PRATIQUES
  {
    id = "quick_debug",
    name = "Debug Rapide",
    icon = "üîç",
    category = "practical",
    description = "Debugging efficace",
    prompt = [[Pour un debugging efficace de ce concept :
1. Points de contr√¥le cl√©s :
   - O√π placer les breakpoints strat√©giques ?
   - Quelles variables surveiller ?
   - Quels cas tester en priorit√© ?

2. Erreurs courantes (80%) :
   - Quels probl√®mes causent la majorit√© des bugs ?
   - Quelles v√©rifications faire en premier ?
   - Quels patterns d'erreurs rechercher ?

3. Solutions rapides :
   - Quelles corrections apportent les meilleurs r√©sultats ?
   - Quelles optimisations sont les plus simples ?
   - Quels tests effectuer en priorit√© ?

Le probl√®me √† debugger est : ]],
  },
  {
    id = "quick_optimize",
    name = "Optimisation Rapide",
    icon = "‚ö°",
    category = "practical",
    description = "Gains rapides",
    prompt = [[Pour une optimisation efficace selon le principe 20/80 :
1. Goulots d'√©tranglement :
   - O√π sont les 20% du code qui causent 80% des probl√®mes ?
   - Quelles optimisations donneront les meilleurs r√©sultats ?
   - Quels compromis sont les plus rentables ?

2. Gains rapides :
   - Quelles optimisations sont faciles √† impl√©menter ?
   - Quelles parties du code sont les plus critiques ?
   - O√π sont les victoires rapides ?

3. Validation :
   - Comment mesurer l'impact des optimisations ?
   - Quels benchmarks utiliser ?
   - Comment valider les am√©liorations ?

Le code √† optimiser est : ]],
  },
  {
    id = "quick_review",
    name = "Revue Rapide",
    icon = "üëÄ",
    category = "practical",
    description = "Revue de code efficace",
    prompt = [[Pour une revue de code efficace (20% qui compte pour 80%) :
1. Points critiques :
   - Quels aspects v√©rifier en priorit√© ?
   - Quels patterns probl√©matiques rechercher ?
   - Quelles bonnes pratiques sont essentielles ?

2. S√©curit√© et robustesse :
   - Quelles sont les vuln√©rabilit√©s courantes ?
   - Quels cas limites v√©rifier ?
   - Quelles validations sont critiques ?

3. Maintenabilit√© :
   - Quels aspects du code pourraient poser probl√®me ?
   - Comment am√©liorer la lisibilit√© ?
   - Quelles parties n√©cessitent une refactorisation ?

Le code √† revoir est : ]],
  },
  {
    id = "optimization",
    name = "Optimisation",
    icon = "‚ö°",
    category = "practical",
    description = "Performance et efficacit√©",
    prompt = [[Analyse les aspects d'optimisation pour ce concept :
1. Performance :
   - Quels sont les goulots d'√©tranglement typiques ?
   - Quelles optimisations sont possibles ?
   - Quels compromis consid√©rer ?

2. Complexit√© :
   - Quelle est la complexit√© temporelle ?
   - Quelle est la complexit√© spatiale ?
   - Comment r√©duire la complexit√© ?

3. Ressources :
   - Comment optimiser l'utilisation m√©moire ?
   - Comment am√©liorer l'efficacit√© CPU ?
   - Quelles ressources sont critiques ?

4. Scalabilit√© :
   - Comment le code se comporte √† grande √©chelle ?
   - Quels probl√®mes peuvent survenir ?
   - Comment am√©liorer la scalabilit√© ?

5. Cas limites :
   - Quels cas limites consid√©rer ?
   - Comment g√©rer les situations extr√™mes ?
   - Quelles optimisations sp√©cifiques appliquer ?

Le concept √† optimiser est : ]],
  },

  -- PERSPECTIVES AVANC√âES
  {
    id = "expert_view",
    name = "Vision Expert",
    icon = "üë®‚Äçüî¨",
    category = "advanced",
    description = "Perspective avanc√©e",
    prompt = [[Comment un expert voit-il ce concept ?
1. Quelles subtilit√©s un novice pourrait manquer ?
2. Quels aspects sont souvent mal compris ?
3. Quelles optimisations sont possibles ?
4. Quels cas limites sont importants ?
Le concept √† analyser est : ]],
  },
  {
    id = "context",
    name = "Contexte et Applications",
    icon = "üåç",
    category = "advanced",
    description = "Vue d'ensemble",
    prompt = [[Replace ce concept dans son contexte plus large :
1. D'o√π vient ce concept ?
2. Pourquoi a-t-il √©t√© d√©velopp√© ?
3. O√π est-il particuli√®rement utile ?
4. Comment s'int√®gre-t-il avec d'autres concepts ?
Le concept √† contextualiser est : ]],
  },
  {
    id = "alternative_approaches",
    name = "Approches Alternatives",
    icon = "üîÑ",
    category = "advanced",
    description = "Diff√©rentes solutions",
    prompt = [[Propose diff√©rentes approches pour ce probl√®me :
1. Solution classique :
   - Impl√©mentation standard
   - Avantages/inconv√©nients
   - Cas d'utilisation

2. Solution orient√©e performance :
   - Optimisations possibles
   - Compromis n√©cessaires
   - Gains attendus

3. Solution orient√©e m√©moire :
   - Gestion m√©moire optimis√©e
   - Structures de donn√©es
   - Compromis espace/temps

4. Solution bit √† bit :
   - Manipulations binaires
   - Optimisations bas niveau
   - Cas d'application

Le probl√®me √† analyser est : ]],
  },

  -- STYLES ET PRATIQUES
  {
    id = "best_practices",
    name = "Bonnes Pratiques",
    icon = "‚ú®",
    category = "style",
    description = "Standards et conventions",
    prompt = [[Explique les meilleures pratiques pour ce concept :
1. Conventions et standards :
   - Quelles sont les conventions √©tablies ?
   - Quels standards suivre ?
   - Quelles sont les pratiques recommand√©es ?

2. Anti-patterns √† √©viter :
   - Quelles sont les erreurs communes ?
   - Quels pi√®ges √©viter ?
   - Quelles sont les mauvaises pratiques courantes ?

3. Cas d'utilisation :
   - Quand utiliser ce concept ?
   - Quand ne pas l'utiliser ?
   - Quelles sont les alternatives ?

4. S√©curit√© et robustesse :
   - Quels aspects de s√©curit√© consid√©rer ?
   - Comment rendre le code plus robuste ?
   - Quelles v√©rifications impl√©menter ?

5. Maintenabilit√© :
   - Comment rendre le code maintenable ?
   - Comment documenter efficacement ?
   - Comment faciliter les tests ?

Le concept √† analyser est : ]],
  },
  {
    id = "code_style",
    name = "Style de Code",
    icon = "üìù",
    category = "style",
    description = "Lisibilit√© et maintenance",
    prompt = [[Analyse le style de code pour ce concept :
1. Lisibilit√© :
   - Comment rendre le code plus lisible ?
   - Quelles conventions de nommage utiliser ?
   - Comment structurer le code ?

2. Modularit√© :
   - Comment d√©couper le code ?
   - Quelle architecture adopter ?
   - Comment g√©rer les d√©pendances ?

3. Design Patterns :
   - Quels patterns sont applicables ?
   - Comment les impl√©menter correctement ?
   - Quels b√©n√©fices apportent-ils ?

4. Tests :
   - Comment tester efficacement ?
   - Quels cas de test pr√©voir ?
   - Comment assurer la couverture ?

5. Documentation :
   - Comment documenter le code ?
   - Quels aspects documenter ?
   - Comment maintenir la documentation ?

Le concept √† analyser est : ]],
  },
  {
    id = "carmack_style",
    name = "Style Carmack",
    icon = "üöÄ",
    category = "style",
    description = "Approche John Carmack",
    prompt = [[Analyse ce probl√®me avec l'approche John Carmack :
1. Optimisation bas niveau :
   - Comment optimiser au niveau des registres ?
   - Quelles optimisations bit-√†-bit sont possibles ?
   - Comment minimiser les acc√®s m√©moire ?

2. Architecture performante :
   - Comment structurer pour la performance ?
   - Quelles structures de donn√©es utiliser ?
   - Comment g√©rer la m√©moire efficacement ?

3. Approche pragmatique :
   - Quelle est la solution la plus directe ?
   - Comment simplifier la logique ?
   - Quels compromis performance/lisibilit√© ?

4. Consid√©rations techniques :
   - Comment exploiter le hardware ?
   - Quelles sp√©cificit√©s du CPU utiliser ?
   - Quelles optimisations assembleur possibles ?

Le probl√®me √† r√©soudre est : ]],
  },
  {
    id = "five_stars",
    name = "Style 5 √âtoiles",
    icon = "‚≠ê",
    category = "style",
    description = "Solution √©l√©gante",
    prompt = [[Analyse ce probl√®me comme un mainteneur 5 √©toiles :
1. Approche √©l√©gante :
   - Quelle solution la plus √©l√©gante ?
   - Comment maximiser l'efficacit√© ?
   - Quelles astuces avanc√©es utiliser ?

2. Optimisations expertes :
   - Quelles optimisations non √©videntes ?
   - Comment r√©duire la complexit√© ?
   - Quelles techniques avanc√©es employer ?

3. Style et qualit√© :
   - Comment rendre le code parfait ?
   - Quelles conventions respecter ?
   - Comment d√©passer les attentes ?

4. Documentation et clart√© :
   - Comment documenter clairement ?
   - Quels aspects expliquer ?
   - Comment justifier les choix ?

Le probl√®me √† r√©soudre est : ]],
  },

  -- TECHNIQUES SP√âCIFIQUES
  {
    id = "pointer_magic",
    name = "Full Pointeurs",
    icon = "üîç",
    category = "specific",
    description = "Solution pointeurs",
    prompt = [[R√©sous ce probl√®me en utilisant uniquement des pointeurs :
1. Manipulation de pointeurs :
   - Comment utiliser l'arithm√©tique des pointeurs ?
   - Quelles structures avec pointeurs cr√©er ?
   - Comment optimiser les d√©r√©f√©rencements ?

2. Techniques avanc√©es :
   - Comment utiliser les pointeurs de fonction ?
   - Quelles structures cha√Æn√©es impl√©menter ?
   - Comment g√©rer les pointeurs multiples ?

3. Optimisations :
   - Comment minimiser les copies ?
   - Comment optimiser les acc√®s m√©moire ?
   - Quelles astuces pointeurs utiliser ?

4. S√©curit√© et robustesse :
   - Comment v√©rifier les pointeurs ?
   - Comment √©viter les fuites ?
   - Quelles validations impl√©menter ?

Le probl√®me √† impl√©menter est : ]],
  },
  {
    id = "bit_manipulation",
    name = "Op√©rations Binaires",
    icon = "‚ö°",
    category = "specific",
    description = "Manipulation bits",
    prompt = [[R√©sous ce probl√®me avec des op√©rations binaires :
1. Op√©rations bit √† bit :
   - Quels masques binaires utiliser ?
   - Quelles op√©rations bit √† bit appliquer ?
   - Comment optimiser les manipulations ?

2. Techniques binaires :
   - Comment utiliser les shifts ?
   - Quelles op√©rations AND/OR/XOR ?
   - Comment optimiser les tests de bits ?

3. Optimisations bas niveau :
   - Comment r√©duire les op√©rations ?
   - Quelles astuces binaires utiliser ?
   - Comment exploiter les flags CPU ?

4. Cas particuliers :
   - Comment g√©rer les signes ?
   - Comment traiter les overflows ?
   - Quelles limites consid√©rer ?

Le probl√®me √† r√©soudre est : ]],
  },
}

-- Cache pour les prompts charg√©s depuis les packs
M.custom_prompts = {}

-- Charger les packs communautaires
function M.load_packs()
  if not config.options.packs.enabled then
    return
  end

  M.custom_prompts = {}

  for _, pack_path in ipairs(config.options.packs.paths) do
    if vim.fn.isdirectory(pack_path) == 1 then
      local pack_files = vim.fn.glob(pack_path .. "/*.json", false, true)

      for _, file in ipairs(pack_files) do
        local success, content = pcall(function()
          local file_content = table.concat(vim.fn.readfile(file), "\n")
          return vim.fn.json_decode(file_content)
        end)

        if success and content and content.prompts then
          for _, prompt in ipairs(content.prompts) do
            table.insert(M.custom_prompts, prompt)
          end
        end
      end
    end
  end
end

-- Obtenir tous les prompts (builtin + custom)
function M.get_all()
  M.load_packs()
  local all_prompts = vim.deepcopy(M.builtin)
  for _, prompt in ipairs(M.custom_prompts) do
    table.insert(all_prompts, prompt)
  end
  return all_prompts
end

-- Obtenir les prompts par cat√©gorie
function M.get_by_category(category)
  local all_prompts = M.get_all()
  local filtered = {}

  for _, prompt in ipairs(all_prompts) do
    if prompt.category == category then
      table.insert(filtered, prompt)
    end
  end

  return filtered
end

-- Obtenir un prompt par ID
function M.get_by_id(id)
  local all_prompts = M.get_all()

  for _, prompt in ipairs(all_prompts) do
    if prompt.id == id then
      return prompt
    end
  end

  return nil
end

-- Lister les cat√©gories disponibles
function M.list_categories()
  local all_prompts = M.get_all()
  local categories = {}
  local seen = {}

  for _, prompt in ipairs(all_prompts) do
    if prompt.category and not seen[prompt.category] then
      table.insert(categories, prompt.category)
      seen[prompt.category] = true
    end
  end

  return categories
end

return M
